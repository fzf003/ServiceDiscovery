Add this to the program class
#####
private static IPAddress LocalIPAddress()
{
    if (!NetworkInterface.GetIsNetworkAvailable()) { return null; }

    var host = Dns.GetHostEntry(Dns.GetHostName());

    return host.AddressList.FirstOrDefault(ip => ip.AddressFamily == AddressFamily.InterNetwork);
}
#####

add this to the Main function:
#####
var port = ServiceManagerConfig.GetNextAvailablePort();

var serviceName = "Service.Api";
var serviceId = $"{serviceName}_{LocalIPAddress()}:{port}";
#####

Replace kestrel config "options.Listen(IPAddress.Any, 5000, listenOptions => "
#####
options.Listen(IPAddress.Any, port, listenOptions => 
#####

add this to the kestrel config:
#####
.ConfigureServices(
    services =>
        {
            services.Configure<ServiceManagerConfig>(
                options =>
                    {
                        options.ServicePort = port;
                        options.ServiceName = serviceName;
                        options.ServiceId = serviceId;
                        options.ServiceAddress = LocalIPAddress().ToString();
                    });
            services.AddSingleton<IConfigurationRegistry>(
                CondenserConfigBuilder.FromConsul().WithAgentAddress("127.0.0.1").WithAgentPort(8500).Build());
        })
#####

Enhance Startup Configure method signature with this
#####
, IServiceManager manager, IServiceRegistry serviceRegistry
#####

add this to the begining of the startup configure method:
#####
manager.AddApiUrl("/api/ strip=/api/");
manager.WithDeregisterIfCriticalAfter(TimeSpan.FromSeconds(30));
manager.AddHttpHealthCheck("health", 10).RegisterServiceAsync();
#####

add this to the start ConfigureServices method:
#####
services.AddConsulServices();
#####

modify the app.run response with this:
#####
var response = $"hello, world from {manager.ServiceName} @ {manager.ServiceAddress}:{manager.ServicePort}";
#####

1. Run Consul
2. go to http://localhost:8500 and verify consul is running (keep open)

3. Run Fabio
4. go to http://localhost:9998 and verify fabio is running (keep open)
5. verify fabio is registered with consul

6. Run a few instances of ServiceDiscovery.exe
7. go to Consul and verify they are registered
8. go to Fabio and verify they are registered
9. go to http://localhost:9999/api/ and verify that you can hit all instance [just reload it and watch the port change :-)]

10. close all ServiceDiscovery.exe and let Consul and Fabio run
11. Go to part 2.